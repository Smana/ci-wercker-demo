box: golang:1.7.3
build:
  steps:
    - setup-go-workspace

    # Gets the dependencies
    - script:
        name: go get
        code: |
          go get

    # Copy kubernetes manifests
      name: copy kubernetes manifests
      code: |
        cp -rp kubernetes-manifests $WERCKER_OUTPUT_DIR/

    # Build the project
    - script:
        name: go build
        code: |
          go build -o $WERCKER_OUTPUT_DIR/myapp main.go

    # Test the project
    - script:
        name: go test
        code: |
          go test ./...

# Push to Google Container Registry
push-gcr:
  steps:
    - script:
      name: build Docker image Tag
      code: |
        export BUILD_DATE=$(date +%Y%m%d)
        export IMGTAG="$BUILD_DATE-$WERCKER_GIT_COMMIT"

    # Install the binary
    - script:
        name: install myapp in /
        code: mv -v myapp /

    - internal/docker-push:
        username: _json_key
        password: $GCP_JSON_KEY_FILE
        repository: gcr.io/elevated-style-182016/ci-demo
        registry: https://gcr.io/v2
        tag: latest, $IMGTAG

    # Copy kubernetes manifests
    - script:
        name: copy kubernetes manifests
        code: |
          mv -v kubernetes-manifests $WERCKER_OUTPUT_DIR

# Update MYAPP
update-myapp:
  steps:
    - script:
      name: build Docker image Tag
      code: |
        export BUILD_DATE=$(date +%Y%m%d)
        export IMGTAG="$BUILD_DATE-$WERCKER_GIT_COMMIT"
    - script:
        name: replace secret and tag in deployment
        code: |
          export MYAPP_SECRET_NAME="myapp-$WERCKER_MAIN_PIPELINE_STARTED"
          sed -i "s/MYAPP_SECRET_NAME/$MYAPP_SECRET_NAME/g" kubernetes-manifests/myapp-deployment.yaml
          sed -i "s/IMGTAG/$IMGTAG/g" kubernetes-manifests/myapp-deployment.yaml
    - kubectl:
        server: $CLUSTER0_API_ENDPOINT
        username: admin
        password: $CLUSTER0_PASSWORD
        insecure-skip-tls-verify: true
        command: apply -f kubernetes-manifests/myapp-deployment.yaml
    - kubectl:
        server: $CLUSTER0_API_ENDPOINT
        username: admin
        password: $CLUSTER0_PASSWORD
        insecure-skip-tls-verify: true
        command: create secret generic $MYAPP_SECRET_NAME --from-literal=key1=$MYAPP_PASSWORD
